<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on 起司的博客</title><link>https://blog.qisiii.asia/tags/%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 博客 on 起司的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>起司</copyright><lastBuildDate>Tue, 23 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.qisiii.asia/tags/%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>搭建自己的博客</title><link>https://blog.qisiii.asia/post/site/personsite/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.qisiii.asia/post/site/personsite/</guid><description>&lt;h2 id="建站方式">建站方式
&lt;/h2>&lt;p>选择建站方式，是使用动态建站（如WordPress、halo），还是使用静态建站（Jekyll、hexo、hugo）。&lt;/p>
&lt;p>前者更偏向于传统的CMS管理系统，有后台管理页面，可以在管理页面发布，修改文章。除了需要服务器之外，需要同时了解前端、后端、数据库相关的知识，当然现有的项目完全可以简单配置后就可以开箱使用。&lt;/p>
&lt;p>后者一般是使用各种开源项目，将文档转为静态资源（html），部署在服务器或者以GithubPages的方式供他人访问。而使用哪个开源项目进行建站，可以去&lt;a class="link" href="https://jamstack.org/generators/" target="_blank" rel="noopener"
>Static Site Generators -Jamstack&lt;/a>选择个人喜欢的项目，本文使用hugo项目进行搭建。&lt;/p>
&lt;h2 id="hugo安装和使用">hugo安装和使用
&lt;/h2>&lt;p>参考&lt;a class="link" href="https://hugo.opendocs.io/getting-started/quick-start/" target="_blank" rel="noopener"
>hugo中文官网&lt;/a>，进行安装，我这里是mac os系统，所以直接使用&lt;code> brew install hugo&lt;/code>进行安装。&lt;/p>
&lt;p>使用命令&lt;code>hugo new site [路径]&lt;/code>创建项目根目录，比如我这边路径是/Users/qisi/Research/hugo，则会在/Users/qisi/Research/hugo目录下创建以下文件夹&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/2024072938213899385d1f11e71816a675ddadec.png"
loading="lazy"
>&lt;/p>
&lt;p>其中，content文件夹用来存储你的文档，themes文件夹用来存储你想要的主题，hugo.toml是总的配置，其他的后面可以跟着官网慢慢熟悉。&lt;/p>
&lt;p>在&lt;a class="link" href="https://themes.gohugo.io/themes/" target="_blank" rel="noopener"
>主题网站&lt;/a>安装想要的主题，我这里是使用的stack主题，可以通过两种方式安装&lt;/p>
&lt;p>通过git命令，在当前目录执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git submodule add --depth=1 https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>手动安装则是自己新建文件夹，然后clone&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> themes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir hugo-theme-stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/CaiJimmy/hugo-theme-stack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成之后，将stack主题的配置复制一份到hugo根目录，并删除hugo.toml文件&lt;/p>
&lt;p>&lt;code> cp themes/hugo-theme-stack/exampleSite/hugo.yaml ./&lt;/code>&lt;/p>
&lt;p>执行以下命令来新建文件，会自动在content/post目录下新建test.md&lt;/p>
&lt;p>&lt;code>hugo new post/test.md&lt;/code>&lt;/p>
&lt;p>文件内容是,draft表示是草稿&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="err">+++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">title&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;Test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">date&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="ld">2024-07-29T14:25:00+08:00&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">draft&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">+++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">## 这里是我手动添加的内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>hugo server --buildDrafts &lt;/code>启动后台，&amp;ndash;buildDrafts 表示会编译draft=true的文档，通过在浏览器访问http://localhost:1313打开网站，页面如图&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/202407297e4c4da75b240a356d0733d5a61fe2ac.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="github-page">Github Page
&lt;/h2>&lt;p>通过hugo server已经可以在本地电脑进行访问了，但如果想要通过互联网访问，则需要进行额外的设置。&lt;/p>
&lt;p>如果拥有自己的服务器，可以在服务器上启动hugo，然后使用nginx监听并转发到public目录；但如果没有服务器，则可以通过&lt;a class="link" href="[https://pages.github.com/]%28https://pages.github.com/%29" >Github Page&lt;/a>功能来托管自己的项目。&lt;/p>
&lt;p>首先需要创建一个项目，项目名称以github.io结尾，前缀一般用自己的用户名或者有标识的单词&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/202407290cafabcbc2855b8990127a750aa7b8e1.png"
loading="lazy"
>&lt;/p>
&lt;p>将hugo项目的public文件夹作为一个git项目，推送到刚新建的这个Repository中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -am 首次commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin git@github.com:qisiii/qisiii.github.io.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push --set-upstream origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在setting-pages下进行一些设置，如下图所示，保存后就可以通过[关键词].github.io来访问了&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/20240729c3ac3627f8d52fc949f594f3c6e4effe.png"
loading="lazy"
>&lt;/p>
&lt;p>如果想要更个性化的域名，则需要购买一个域名，添加一个cname类型的解析，同时在上图Custom domain的文本框中填入对应的域名，这样子就可以以自己的域名访问了。&lt;/p>
&lt;h2 id="markdown工具">Markdown工具
&lt;/h2>&lt;p>市面上的markdown工具还是蛮多的，各种开发用的ide，或者专门用于markdown的编辑器。我使用的是MarkText(&lt;a class="link" href="https://github.com/marktext/marktext" target="_blank" rel="noopener"
>GitHub - marktext/marktext: 📝A simple and elegant markdown editor, available for Linux, macOS and Windows.&lt;/a>)，建议直接安装&lt;a class="link" href="https://marktext.weero.net/" target="_blank" rel="noopener"
>中文版markText&lt;/a>。&lt;/p>
&lt;p>MarkText的图床功能存在bug：&lt;/p>
&lt;h3 id="uploader为github时上传失败">uploader为github时上传失败
&lt;/h3>&lt;p>原因是GithubApi要求content是base64格式的，所以需要额外做一下处理，参考&lt;a class="link" href="https://github.com/marktext/marktext/pull/3589" target="_blank" rel="noopener"
>pr&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/30-00-10-06-image.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="无法上传剪贴板的图片">无法上传剪贴板的图片
&lt;/h3>&lt;p>其中，无法上传剪贴板图片的bug是由于项目中fileSystem.js中path.join方法参数类型错误导致的；参考&lt;a class="link" href="https://github.com/marktext/marktext/pull/3366" target="_blank" rel="noopener"
>Fix Failure when uploading clipboard images with PicGo （#3360） by Jakentop · Pull Request #3366 · marktext/marktext · GitHub&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/30-00-06-41-image.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="无法检测到picgo存在">无法检测到picgo存在
&lt;/h3>&lt;p>这个可能是由于env的路径并不包含picgo所在的路径，在env.js有一段逻辑是这样的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">patchEnvPath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PATH&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PATH&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">delimiter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">delimiter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/Library/TeX/texbin:/opt/homebrew/bin:/usr/local/bin&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改为下面这样，我是用yarn 安装的picgo，路径在/opt/homebrew/bin 下面，我为了省事，就将/opt/homebrew/bin和/usr/local/bin都追加在后面了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">patchEnvPath&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;darwin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PATH&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PATH&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">endsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">delimiter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">delimiter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/Library/TeX/texbin:/opt/homebrew/bin:/usr/local/bin&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改完之后打包会是下面这样，就能识别到picgo了&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/1723657557974.jpg"
loading="lazy"
>&lt;/p>
&lt;p>但是可能依然会存在上传截图失败的情况，这种场景下是找不到node，可以自己给node建立一个软连接到/usr/local/bin下，比如我这边是nvm管理的node 18，通过&lt;code>ln -s /Users/hkc/.nvm/versions/node/v18.15.0/bin/node /usr/local/bin/node&lt;/code> 建立软链接&lt;/p>
&lt;p>&lt;img src="http://picgo.qisiii.asia/post/1723657486782.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="参考博客">参考博客：
&lt;/h2>&lt;p>&lt;a class="link" href="https://jinli.io/p/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B%E4%BA%8C%E4%BD%BF%E7%94%A8hugo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/" target="_blank" rel="noopener"
>个人网站的建立过程（二）：使用Hugo框架搭建个人网站&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jinli.io/p/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B%E4%BA%8C%E4%BD%BF%E7%94%A8hugo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/" target="_blank" rel="noopener"
>个人网站的建立过程（二）：使用Hugo框架搭建个人网站&lt;/a>&lt;/p></description></item></channel></rss>